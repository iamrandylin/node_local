{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nimport { updateVersion } from './user/actions';\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists'];\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware({\n    thunk: false\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: load({\n    states: PERSISTED_KEYS\n  })\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"sources":["/home/iamrandylin2/uni4/uniswap-interface/src/state/index.ts"],"names":["configureStore","getDefaultMiddleware","save","load","application","user","transactions","swap","mint","lists","burn","multicall","updateVersion","PERSISTED_KEYS","store","reducer","middleware","thunk","states","preloadedState","dispatch"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,MAAMC,cAAwB,GAAG,CAAC,MAAD,EAAS,cAAT,EAAyB,OAAzB,CAAjC;AAEA,MAAMC,KAAK,GAAGd,cAAc,CAAC;AAC3Be,EAAAA,OAAO,EAAE;AACPX,IAAAA,WADO;AAEPC,IAAAA,IAFO;AAGPC,IAAAA,YAHO;AAIPC,IAAAA,IAJO;AAKPC,IAAAA,IALO;AAMPE,IAAAA,IANO;AAOPC,IAAAA,SAPO;AAQPF,IAAAA;AARO,GADkB;AAW3BO,EAAAA,UAAU,EAAE,CAAC,GAAGf,oBAAoB,CAAC;AAAEgB,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAxB,EAA4Cf,IAAI,CAAC;AAAEgB,IAAAA,MAAM,EAAEL;AAAV,GAAD,CAAhD,CAXe;AAY3BM,EAAAA,cAAc,EAAEhB,IAAI,CAAC;AAAEe,IAAAA,MAAM,EAAEL;AAAV,GAAD;AAZO,CAAD,CAA5B;AAeAC,KAAK,CAACM,QAAN,CAAeR,aAAa,EAA5B;AAEA,eAAeE,KAAf","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport mint from './mint/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport multicall from './multicall/reducer'\n\nimport { updateVersion } from './user/actions'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\n\nstore.dispatch(updateVersion())\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"]},"metadata":{},"sourceType":"module"}